procedure two_to(integer val n) -> integer
    integer result;
{
    result <- 1;
    while n > 0 do
        result <- result * 2;
        n <- n - 1;
    od
    return result;
}

procedure nbit(integer val x, integer val n) -> integer
{
    while n > 0 do
        x <- x / 2;
        n <- n - 1;
    od

    if x / 2 * 2 = x then
        return 0;
    else
        return 1;
    fi
}

procedure bit_and(integer val x, integer val y) -> integer
    integer result;
    integer i;
{
    while i < 32 do
        if nbit(x, i) = 1 and nbit(y, i) = 1 then
            result <- result + two_to(i);
        fi
        i <- i + 1;
    od
    return result;
}

procedure bit_or(integer val x, integer val y) -> integer
    integer result;
    integer i;
{
    while i < 32 do
        if nbit(x, i) = 1 or nbit(y, i) = 1 then
            result <- result + two_to(i);
        fi
        i <- i + 1;
    od
    return result;
}

procedure bit_xor(integer val x, integer val y) -> integer
    integer result;
    integer i;
{
    while i < 32 do
        if nbit(x, i) = nbit(y, i) then
            result <- result + two_to(i);
        fi
        i <- i + 1;
    od
    return result;
}

procedure bit_shl(integer val x, integer val n) -> integer
{
    return x * two_to(n);
}

procedure bit_shr(integer val x, integer val n) -> integer
{
    return x / two_to(n);
}
